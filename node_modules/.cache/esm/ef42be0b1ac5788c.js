let sendSuccessResponse,sendErrorResponse,UserModel,PostModel;_1ac‍.x([["writePost",()=>writePost],["editPost",()=>editPost],["deletePost",()=>deletePost]]);_1ac‍.w("../helper/common",[["sendSuccessResponse",["sendSuccessResponse"],function(v){sendSuccessResponse=v}],["sendErrorResponse",["sendErrorResponse"],function(v){sendErrorResponse=v}]]);_1ac‍.w("../schemas/user",[["UserModel",["UserModel"],function(v){UserModel=v}]]);_1ac‍.w("../schemas/posts",[["PostModel",["PostModel"],function(v){PostModel=v}]]);



const writePost = async (req, res) => {
  const body = {
    postContent: req.body.postContent,
    userId: req.body.userId,
    postDate: new Date()
  }
  let newPost = new PostModel(body)
  newPost.save(async (err, data) => {
    if (err)
      sendErrorResponse(res, err)
    else {
      let user = await UserModel.findById(req.body.userId)
      user.posts.push(data._id)
      user.save();
      sendSuccessResponse(res, data);
    }
  })
}

const editPost = async (req, res) => {
  PostModel.findOneAndUpdate({ _id: req.body.postId, userId: req.body.userId }, { postContent: req.body.postContent }, (err, data) => {
    if (err)
      sendErrorResponse(res, err)
    else {
      if (data === null) {
        res.status(400).send({ message: "No post found" });
      }
      else
        sendSuccessResponse(res, req.body)
    }
  })
}

const deletePost = async (req, res) => {
  PostModel.findOneAndRemove({ _id: req.body.postId, userId: req.body.userId }, (err, response) => {
    if (err) {
      sendErrorResponse(res, err)
    }
    else {
      if (response === null) {
        res.status(400).send({ message: "No post found" });
      }
      else {
        UserModel.update(
          { "_id": req.body.userId },
          { "$pull": { "posts": req.body.postId } },
          (err, data) => {
            if (err) {
              sendErrorResponse(res, err)
            }
            else
              sendSuccessResponse(res, data)
          }
        );
      }
    }
  });
}


