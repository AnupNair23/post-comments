let sendSuccessResponse,sendErrorResponse,UserModel,bcrypt,getToken;_784‍.x([["userLogin",()=>userLogin],["userSignUp",()=>userSignUp],["showPosts",()=>showPosts]]);_784‍.w("../helper/common",[["sendSuccessResponse",["sendSuccessResponse"],function(v){sendSuccessResponse=v}],["sendErrorResponse",["sendErrorResponse"],function(v){sendErrorResponse=v}]]);_784‍.w("../schemas/user",[["UserModel",["UserModel"],function(v){UserModel=v}]]);_784‍.w("bcryptjs",[["default",["bcrypt"],function(v){bcrypt=v}]]);_784‍.w("../helper/jwt",[["getToken",["getToken"],function(v){getToken=v}]]);




const userSignUp = async (req, res) => {
  try {
    let userFound = await UserModel.findOne({ emailId: req.body.emailId }).exec();
    if (userFound)
      res.status(400).send({"message" : "EmailId already registered"})
    else {
      req.body.password = bcrypt.hashSync(req.body.password, 10);
      let user = new UserModel(req.body);
      user.save((err, data) => {
        if (err) {
          sendErrorResponse(res, err)
        }
        else {
          sendSuccessResponse(res, data)
        }
      })
    }
  } catch (error) {
    res.status(500).send(error);
  }
}

const userLogin = async (req, res) => {
  try {
    let user = await UserModel.findOne({ emailId: req.body.emailId }).exec();
    _784‍.g.console.log('user -- ', user)
    if (!user) {
      return res.status(400).send({ message: "The emailId does not exist" });
    }
    if (!bcrypt.compareSync(req.body.password, user.password)) {
      return res.status(400).send({ message: "The password is invalid" });
    }
    const token = getToken(user);
    _784‍.g.console.log('user toke n -- ', token)
    // res.send({ message: "The emailId and password combination is correct!" });
    sendSuccessResponse(res,{user: user, token: token})
  } catch (error) {
    res.status(500).send(error);
  }
}

const showPosts = async (req,res) => {
  try {

  }
  catch (error) {
    res.status(500).send(error)
  }
}






